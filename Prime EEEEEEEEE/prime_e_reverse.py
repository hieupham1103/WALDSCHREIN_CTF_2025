from math import gcd

def long_to_bytes(n: int) -> bytes:
    if n == 0:
        return b"\x00"
    length = (n.bit_length() + 7) // 8
    return n.to_bytes(length, "big")

def egcd(a, b):
    if b == 0:
        return (a, 1, 0)
    g, x1, y1 = egcd(b, a % b)
    return (g, y1, x1 - (a // b) * y1)

def modinv(a, n):
    g, x, _ = egcd(a, n)
    return x % n

def common_modulus_recover(ct1, ct2, e1, e2, n):
    g, a, b = egcd(e1, e2)
    if a < 0:
        ct1 = modinv(ct1, n)
        a = -a
    if b < 0:
        ct2 = modinv(ct2, n)
        b = -b

    part1 = pow(ct1, a, n)
    part2 = pow(ct2, b, n)
    m = (part1 * part2) % n

    return m, long_to_bytes(m)

ct_1 =  87843886781401420979149250033724833211598126025291438276693366030244270244261926430777234316186311549322076289416989981828717406704369359544915937776521937832915162675566637563032826655916850816398396278228366954601577388505565519148291367376694956770980810028111132089419405554168032369876735740497040808572
ct_2 =  96441432047296578064088563763558526005171893273374579913866905228598822979165533416236049994053576474907555160815352635817070276438184619576311350761604897784530916287572648867903239177506535797429912836298176689350979957062189737482756371310636755931734810260175684511443238765147102200256670379329821405176
e_1 =  21799
e_2 =  31751
n =  97750699572850109573586372209875405859336462446629766979257661033631566713080872183328096526566619349492350235259181190779902816477268937384439891185562335858264109603287974554591886007079524578808980678665591486327402724087839723873697864495425442930980416339002648644752964506222721999514746948884514461359
m_int, m_bytes = common_modulus_recover(ct_1, ct_2, e_1, e_2, n)
print("pt (int):", m_int)
print("pt (bytes):", m_bytes)
print("flag:", m_bytes.decode(errors="ignore"))
